VERTEX SHADER: 


in: 
vertex: vec3
normal: vec3
color: vec3
texCoord: vec2

out: 
frontColor: vec4	
vtexCoord: vec2


uniform: 
modelViewProjectionMatrix: mat4
normalMatrix: mat3  (	de object a eye)		vec3 N = normalize(normalMatrix * normal);



altres: 
- gl_Position: vec4




||||||||||||||||||||||||||||||||||||||||||||
FRAGMENT SHADER: 

in: 
frontColor

out: 
fragColor

uniform:
uniform sampler2D colormap; (per indicar quina: colorMap0...)


altres: 
gl_FragCoord (READ ONLY)
gl_FragDepth (es pot escriure)


|||||||||||||||||||||||||||||||||||||||||||||
uniforms que es raonable que puguin anar als dos:

unfiform float time; 
uniform vec3 boundingBoxMin;
uniform vec3 boundingBoxMax;
uniform vec2 mousePosition;  (window space)

uniform vec4 lightPosition; (eye space)
uniform FLOAT matShininess;// similar a gl_FrontMaterial.shininess (valor petit, specular mes expandida)






|||||||||||||||||||||||||||||||||||||||||||
OTHER: 
En GLARENASL: blau es el z
sinusoidal: graus*PI/180 = rad  w=2PI/PERIOD (speed*temps (wt) -> radians es angle)  movement: Asin(wt)  (2PI when freq is in Hz)   (es fa amb suma)  (abs() quan nomes volem la ona positiva (anira el doble de rapid))    velocity: AwCos(wt)	(w frequencia)	
Supported component names: 	{x, y, z, w} (ex: points, normals)
				{r, g, b, a} (colors)
				{s, t, p, q} (textures)
Matrius en vertical
PI = acos(-1)
rotate es fa desde els axis (per tant suara de fer translacio abans i despres)
en clipping invertir Z posa lo de darrere a davant -> en window gl_FragDepth=1-gl_FragCoord.z;
Coordenades dispositiu (gl_FragCoord) la z va de 0 a 1
normalize(normalMatrix * normal);
A PARTIR DE CLIPING SCALING NO TE SENTIT SCALE Z
normalitzar vectors abans de equacions (N, L, R, V) -> al VS (si il·lum per vertex) o FS (si il·lum per fragment)
angle incident (N-L) == angle reflectat (N-R))
COSES DE LLUMS sempre es fan amb coordenades de eye
PHONG es redueix a = Ka*Ia + Kd*Id*(N*L) + Ks*Is*(R*V)^s     (s matShininess )  (d NO si N*L < 0)  (a NO si R*V < 0) (N*L,  R*V,  scalar product)
max(0.0, NL) i  max(0.0, RV). En especular s'han de comprovar les dos. 
R=2(N·L)N-L
En light al calulcar a eye el P i L no preocuparse per la w, ja que sera 1
N, L, R, V VEC3
Per phong a fragment, pasar a aquest N i P en eye. (Realment es podria pasar directe a fragment tant L, N, V)
s, t avancen 1 cada cop que es repeteix textura
multiplidar texCoord o vtexCoord per nombre gran, fa que la textura es multipliqui
frame = int(mod(time/(time/frame), totalframes))
time es retorna en segons
millor fer servir mod
fer esfera de model -> normalize els vertexs en m space
NLR I V VEC3, tenen w 0
NORMAL A FS -> normalize(cross(dFdx(V), dFdy(V)))    V en espai de ull
fins en eye, w es 1
int de double no es fa round



FUNCIONS QUE ES PODEN CRIDAR: 
fract(x) 	-> part fraccionaria
mod(x,y) 	-> x modul y
mix(a,b,t)	-> interpolacio a, b ponderada per t -> (a+t(b-a))   t [0,1]    a b pot ser vectors
sin(x)
length(resta dels dos punts) -> per exemple retorna diagonal
dot() -> producte escalar. PERO vec * vec ES component a component
pow(); 
texture(colorMap, vtexCoord)



Exercicis dificils: 
Color gradient ((x - (bMIN)) / (bMAx - bMIN))
oscillate
explosion   -> vtex = vtex*(vec2(1.0/8, 1.0/6))
uv-unfold  -> abans de restar SEMPRE PRIMER *2
Hinomaru bis
uncover




